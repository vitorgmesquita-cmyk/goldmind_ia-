<?php

// api_local_generate.php

// Inclui o arquivo de configura√ß√£o (onde provavelmente est√£o as credenciais do banco de dados)
require 'config.php';

// Define o tipo de conte√∫do da resposta como JSON
header('Content-Type: application/json');

// Decodifica os dados recebidos na requisi√ß√£o como um array associativo
$data = json_decode(file_get_contents('php://input'), true);

// Verifica se a decodifica√ß√£o falhou e retorna um erro se for o caso
if (!$data) {
    exit(json_encode(['error' => 'Requisi√ß√£o inv√°lida']));
}

// Extrai os par√¢metros da requisi√ß√£o, com valores padr√£o caso n√£o sejam fornecidos
$keywords = $data['keywords'] ?? ''; // Palavras-chave separadas por v√≠rgula
$tipo = $data['tipo'] ?? 'caption'; // Tipo de texto a ser gerado (caption, descricao, bio, ideia, tweet)
$tom = $data['tom'] ?? 'divertido'; // Tom da escrita (divertido, profissional, emocional, direto)
$qtd = max(1, min(6, (int)($data['qtd'] ?? 3))); // Quantidade de textos a serem gerados (m√≠nimo 1, m√°ximo 6)
$translateTo = $data['translateTo'] ?? ''; // Par√¢metro para tradu√ß√£o (n√£o utilizado no c√≥digo atual)

/**
 * Seleciona um elemento aleat√≥rio de um array.
 * @param array $arr O array do qual selecionar um elemento.
 * @return mixed Um elemento aleat√≥rio do array.
 */
function pick($arr) {
    return $arr[array_rand($arr)];
}

/**
 * Converte uma string em um slug (remove caracteres n√£o alfanum√©ricos e converte para min√∫sculas).
 * @param string $s A string a ser convertida.
 * @return string A string convertida em slug.
 */
function slug($s) {
    return preg_replace('/[^\w]+/','', mb_strtolower($s));
}

// Divide as palavras-chave em um array, remove espa√ßos em branco e filtra entradas vazias
$kwArr = array_values(array_filter(array_map('trim', explode(',', $keywords))));

// Define os templates para cada tipo de texto
$templates = [
    'caption' => [
        "{lead} {keywords_short} ‚Äî perfeito pra quem quer {beneficio}.",
        "{lead} Experimente {keywords_short} e sinta a diferen√ßa: {beneficio}."
    ],
    'descricao' => [
        "{nome}. {descricao_curta} | Tamanho: {tamanho}. Cor: {cor}. Pre√ßo: R$ {preco}. Estoque: {estoque}.",
        "{nome} ‚Äî {descricao_curta}. Confeccionado em {material}."
    ],
    'bio' => [
        "{lead} ‚ú® Criando {keywords_short}. Encomendas via DM.",
        "{lead} ‚Ä¢ {keywords_short} ‚Ä¢ Atendimento r√°pido"
    ],
    'ideia' => [
        "Post: Mostre um close do produto em uso e conte a hist√≥ria por tr√°s dele.",
        "Tutorial r√°pido: 3 formas de usar {keywords_short}."
    ],
    'tweet' => [
        "{lead} {keywords_short} ‚Äî simples assim.",
        "{lead} Oferta rel√¢mpago: {cta}"
    ]
];

// Define os leads (in√≠cios de frases) para cada tom
$leads = [
    'divertido' => ['Olha essa belezura!', 'Quem n√£o ama uma novidade?'],
    'profissional' => ['Apresentamos', 'Lan√ßamento oficial'],
    'emocional' => ['Feito com carinho', 'Feito pensando em voc√™'],
    'direto' => ['Novo', 'Oferta']
];

// Define alguns benef√≠cios e chamadas para a√ß√£o (CTAs) gen√©ricos
$beneficios = ['conforto e estilo', 'durabilidade', 'acabamento premium', 'melhor custo-benef√≠cio'];
$ctas = ['Garanta j√° o seu!', 'Compre agora', 'Link na bio'];

$items = []; // Array para armazenar os textos gerados
$hashtags = []; // Array para armazenar as hashtags geradas

// Loop para gerar a quantidade desejada de textos
for ($i = 0; $i < $qtd; $i++) {
    // Seleciona os templates para o tipo de texto especificado, ou usa 'caption' como padr√£o
    $t = $templates[$tipo] ?? $templates['caption'];
    // Escolhe um template aleat√≥rio
    $tpl = $t[array_rand($t)];

    // Monta um contexto com os valores a serem substitu√≠dos no template
    $ctx = [
        '{keywords_short}' => implode(' e ', array_slice($kwArr, 0, 2)) ?: 'produto', // Usa as duas primeiras palavras-chave ou 'produto'
        '{nome}' => $kwArr[0] ?? 'Produto', // Usa a primeira palavra-chave ou 'Produto'
        '{descricao_curta}' => 'pe√ßa feita com aten√ß√£o aos detalhes', // Descri√ß√£o curta gen√©rica
        '{tamanho}' => '√∫nico', // Tamanho gen√©rico
        '{cor}' => 'varias cores', // Cor gen√©rica
        '{preco}' => '0,00', // Pre√ßo gen√©rico
        '{estoque}' => '‚Äî', // Estoque gen√©rico
        '{material}' => 'algod√£o', // Material gen√©rico
        '{beneficio}' => $beneficios[array_rand($beneficios)], // Benef√≠cio aleat√≥rio
        '{lead}' => $leads[$tom][array_rand($leads[$tom])] ?? 'Olha isso', // Lead aleat√≥rio para o tom especificado
        '{cta}' => $ctas[array_rand($ctas)] // CTA aleat√≥rio
    ];

    // Substitui os placeholders no template pelos valores do contexto
    $text = strtr($tpl, $ctx);

    // Adiciona um emoji aleat√≥rio ao texto com 50% de chance
    if (rand(0, 1)) {
        $text .= ' ' . (array_rand(['üî•' => 1, '‚ú®' => 1, 'üéâ' => 1]) ? 'üî•' : '‚ú®');
    }

    // Adiciona o texto gerado e sua origem ao array de itens
    $items[] = ['text' => $text, 'origem' => 'local'];
}

// Gera hashtags simples a partir das palavras-chave e adiciona algumas gen√©ricas
foreach ($kwArr as $k) {
    $hashtags[] = preg_replace('/\s+/', '', mb_strtolower($k)); // Remove espa√ßos e converte para min√∫sculas
}
$hashtags = array_values(array_unique(array_merge($hashtags, ['loja', 'moda', 'estilo']))); // Remove duplicatas e adiciona gen√©ricas

// Salva a primeira varia√ß√£o gerada no banco de dados para refer√™ncia
// Apenas se n√£o houver erros ao salvar, o bloco try-catch ignora os erros
try {
    $stmt = $pdo->prepare("INSERT INTO geracoes (tipo, tom, keywords, resultado, origem) VALUES (?, ?, ?, ?, 'local')");
    $stmt->execute([$tipo, $tom, $keywords, $items[0]['text']]);
} catch (Exception $e) {
    /* ignora erros de salvamento */
}

// Retorna os itens gerados e as hashtags em formato JSON
echo json_encode(['items' => $items, 'hashtags' => $hashtags]);


